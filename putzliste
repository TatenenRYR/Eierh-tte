<!doctype html>
<html lang="de">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Putzliste App — Dark Dashboard</title>

  <!-- Tailwind (CDN quick dev) -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- React + ReactDOM UMD -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

  <!-- Babel for in-browser JSX (dev only, fine for local testing) -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <!-- Framer Motion UMD for small animations -->
  <script src="https://unpkg.com/framer-motion/dist/framer-motion.umd.js"></script>

  <style>
    :root{
      --bg:#0b1220;
      --card:#0f1724;
      --muted:#94a3b8;
      --accent:#22c55e;
      --accent-dark:#16a34a;
      --glass: rgba(255,255,255,0.03);
    }
    html,body,#root{height:100%;margin:0;font-family:Inter,ui-sans-serif,system-ui,-apple-system,'Segoe UI',Roboto,'Helvetica Neue',Arial;}
    body{background:var(--bg); color: #e6eef6; -webkit-font-smoothing:antialiased;}
    .card{background:linear-gradient(180deg,var(--card), #0a1220); border-radius:12px; box-shadow:0 6px 18px rgba(2,6,23,0.6); border:1px solid rgba(255,255,255,0.03);}
    .btn { background:var(--accent); color:#072017; padding:.5rem .9rem; border-radius:10px; font-weight:600; transition:transform .12s, box-shadow .12s; }
    .btn:hover{ background:var(--accent-dark); transform:translateY(-1px); box-shadow:0 6px 18px rgba(34,197,94,0.12); }
    .small-btn{ background:#0b1720; border:1px solid rgba(255,255,255,0.04); color:var(--muted); padding:.35rem .6rem; border-radius:8px; }
    .nav-item{ padding:.65rem .9rem; border-radius:10px; cursor:pointer; color:var(--muted); }
    .nav-item.active{ background:rgba(34,197,94,0.08); color:var(--accent); }
    canvas{ background:transparent; border-radius:8px; }
    /* mobile tweaks */
    @media(max-width:768px){
      nav.left{ display:none; } /* we show mobile burger */
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel">
  const { useState, useEffect, useRef } = React;
  const { motion, AnimatePresence } = window["framer-motion"];
  const WEEKDAYS = ['So','Mo','Di','Mi','Do','Fr','Sa'];
  const uid = (p='id') => p + '_' + Math.random().toString(36).slice(2,9);
  const todayISO = () => new Date().toISOString().slice(0,10);
  const addDaysISO = (d,n) => { const x = new Date(d+'T00:00:00'); x.setDate(x.getDate()+n); return x.toISOString().slice(0,10); };
  const monthDays = (y,m) => { const arr=[]; const last=new Date(y,m+1,0); for(let i=1;i<=last.getDate();i++){ const dt=new Date(y,m,i); arr.push({iso: dt.toISOString().slice(0,10), day:i, weekday: dt.getDay()}); } return arr; };

  const LS = 'putz_app_dark_v1';
  function load(){ try{ const r=localStorage.getItem(LS); return r?JSON.parse(r):null }catch{ return null } }
  function save(s){ localStorage.setItem(LS, JSON.stringify(s)); }

  function App(){
    const persisted = load();
    const [page, setPage] = useState('dashboard'); // dashboard, tasks, admin
    const [mobileNav, setMobileNav] = useState(false);

    // data
    const [users, setUsers] = useState(persisted?.users || [{id:'admin', name:'Administrator', role:'admin'},{id:'u1', name:'Mitarbeiter A', role:'user'}]);
    const [profiles, setProfiles] = useState(persisted?.profiles || [{id:'p_admin', name:'Chef'}]);
    const [weeklyTemplate, setWeeklyTemplate] = useState(persisted?.weeklyTemplate || {
      1:[ {id:uid('t'), title:'Küche fegen'} ],
      2:[ {id:uid('t'), title:'Fritteuse testen'} ],
      3:[ {id:uid('t'), title:'Kühlraum messen'} ],
      4:[],5:[],6:[],0:[]
    });
    const [tasksByDate, setTasksByDate] = useState(persisted?.tasksByDate || {});
    const [currentUserId, setCurrentUserId] = useState(persisted?.currentUserId || users[1].id);
    const currentUser = users.find(u=>u.id===currentUserId) || users[0];

    // month & selected date
    const d0 = new Date();
    const [viewMonth, setViewMonth] = useState(persisted?.viewMonth || { year: d0.getFullYear(), month: d0.getMonth() });
    const [selectedDate, setSelectedDate] = useState(persisted?.selectedDate || todayISO());

    // On load: shift overdue tasks one day forward (and record history)
    useEffect(()=>{
      const today = todayISO();
      let changed = false;
      const clone = { ...tasksByDate };
      Object.keys(clone).forEach(date=>{
        clone[date].forEach(task=>{
          if (!task.done && date < today){
            const next = addDaysISO(date, 1);
            task.history = task.history || [];
            task.history.push({ from: date, movedAt: today });
            clone[next] = clone[next] || [];
            clone[next].push(task);
            task._moved = true;
            changed = true;
          }
        });
        clone[date] = (clone[date] || []).filter(t=>!t._moved);
      });
      if (changed) {
        setTasksByDate(clone);
      }
      // eslint-disable-next-line
    }, []);

    // persist on changes
    useEffect(()=>{ save({ users, profiles, weeklyTemplate, tasksByDate, currentUserId, viewMonth, selectedDate }); }, [users, profiles, weeklyTemplate, tasksByDate, currentUserId, viewMonth, selectedDate]);

    // generate tasks for current month based on weekly template
    function ensureTasksForMonth(year, monthIndex){
      const days = monthDays(year, monthIndex);
      const copy = { ...tasksByDate };
      days.forEach(day=>{
        copy[day.iso] = copy[day.iso] || [];
        const templates = weeklyTemplate[day.weekday] || [];
        templates.forEach(tpl=>{
          const exists = copy[day.iso].some(it => it.templateId === tpl.id && it.title === tpl.title);
          if (!exists){
            copy[day.iso].push({
              id: uid('task'),
              title: tpl.title,
              templateId: tpl.id,
              done: false,
              signed: false,
              signer: null,
              signatureDataUrl: null,
              createdFrom: day.iso,
              history: [],
              checklist: [],
              meta: {} // fryer, temps etc
            });
          }
        });
      });
      setTasksByDate(copy);
    }

    // toggle done
    function toggleDone(dateISO, taskId){
      const copy = { ...tasksByDate };
      const t = (copy[dateISO]||[]).find(x=>x.id===taskId);
      if(!t) return;
      t.done = !t.done;
      setTasksByDate(copy);
    }

    // sign task
    function signTask(dateISO, taskId, profile, dataUrl){
      const copy = { ...tasksByDate };
      const t = (copy[dateISO]||[]).find(x=>x.id===taskId);
      if(!t) return;
      t.signed = true;
      t.signer = profile;
      t.signatureDataUrl = dataUrl || null;
      t.signedAt = new Date().toISOString();
      setTasksByDate(copy);
    }

    function updateTaskMeta(dateISO, taskId, nextMeta){
      const copy = { ...tasksByDate };
      const t = (copy[dateISO]||[]).find(x=>x.id===taskId);
      if(!t) return;
      t.meta = { ...(t.meta||{}), ...nextMeta };
      setTasksByDate(copy);
    }

    // helpers for admin
    function addWeeklyTemplate(weekday, title){
      const copy = { ...weeklyTemplate };
      copy[weekday] = [...(copy[weekday]||[]), { id: uid('t'), title }];
      setWeeklyTemplate(copy);
    }
    function addProfile(name){
      const p = { id: uid('p'), name, role: 'user' };
      setProfiles(prev => [...prev, p]);
    }
    function addUser(name, role='user'){
      const u = { id: uid('u'), name, role };
      setUsers(prev => [...prev, u]);
      setProfiles(prev=>[...prev, { id: u.id, name: u.name }]);
    }

    // Dashboard stats
    const todays = tasksByDate[selectedDate] || [];
    const doneCount = todays.filter(t=>t.done).length;
    const totalCount = todays.length;
    const completion = totalCount ? Math.round((doneCount/totalCount)*100) : 0;

    return (
      <div className="flex flex-col h-screen">
        {/* Header */}
        <header className="flex items-center justify-between px-4 py-3 border-b border-gray-800 bg-gradient-to-b from-transparent to-black/20">
          <div className="flex items-center gap-3">
            {/* mobile burger */}
            <button className="md:hidden p-2 rounded-md bg-transparent" onClick={()=>setMobileNav(v=>!v)} aria-label="Menu">
              <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="#9fb8a8" strokeWidth="2"><path d="M3 6h18M3 12h18M3 18h18"/></svg>
            </button>
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-green-500 to-green-400 flex items-center justify-center text-black font-bold">P</div>
              <div>
                <div className="text-lg font-semibold text-green-300">Putzliste App</div>
                <div className="text-xs text-gray-400">Dark Dashboard</div>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <select className="bg-transparent border border-gray-800 text-sm rounded-md px-3 py-1" value={currentUserId} onChange={e=>setCurrentUserId(e.target.value)}>
              {users.map(u=> <option key={u.id} value={u.id}>{u.name}</option>)}
            </select>
            <button className="small-btn" title="Export JSON" onClick={()=>{
              const data = JSON.stringify({ users, profiles, weeklyTemplate, tasksByDate }, null, 2);
              const blob = new Blob([data], {type:'application/json'});
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a'); a.href = url; a.download = 'putzliste_export.json'; a.click(); URL.revokeObjectURL(url);
            }}>Export</button>
          </div>
        </header>

        <div className="flex flex-1 overflow-hidden">
          {/* Left nav - desktop */}
          <aside className="hidden md:block w-64 p-4 border-r border-gray-800">
            <div className="space-y-2">
              <div className={`nav-item ${page==='dashboard'?'active':''}`} onClick={()=>setPage('dashboard')}>📊 Dashboard</div>
              <div className={`nav-item ${page==='tasks'?'active':''}`} onClick={()=>setPage('tasks')}>🗒 Aufgaben</div>
              { currentUser?.role === 'admin' && <div className={`nav-item ${page==='admin'?'active':''}`} onClick={()=>setPage('admin')}>⚙️ Admin</div> }
              <div className="mt-4 text-sm text-gray-400">Schnellaktionen</div>
              <div className="flex gap-2 mt-2">
                <button className="btn w-full" onClick={()=>ensureTasksForMonth(viewMonth.year, viewMonth.month)}>Monat generieren</button>
              </div>
            </div>
          </aside>

          {/* Mobile nav drawer */}
          <AnimatePresence>
          { mobileNav && (
            <motion.div initial={{opacity:0}} animate={{opacity:1}} exit={{opacity:0}} className="md:hidden fixed inset-0 z-40">
              <div className="absolute inset-0 bg-black/40" onClick={()=>setMobileNav(false)}></div>
              <motion.div initial={{x:-300}} animate={{x:0}} exit={{x:-300}} transition={{type:'tween'}} className="relative w-64 h-full bg-[#071018] p-4 z-50">
                <div className="space-y-3">
                  <div className={`nav-item ${page==='dashboard'?'active':''}`} onClick={()=>{ setPage('dashboard'); setMobileNav(false); }}>📊 Dashboard</div>
                  <div className={`nav-item ${page==='tasks'?'active':''}`} onClick={()=>{ setPage('tasks'); setMobileNav(false); }}>🗒 Aufgaben</div>
                  { currentUser?.role === 'admin' && <div className={`nav-item ${page==='admin'?'active':''}`} onClick={()=>{ setPage('admin'); setMobileNav(false); }}>⚙️ Admin</div> }
                </div>
              </motion.div>
            </motion.div>
          )}
          </AnimatePresence>

          {/* Main */}
          <main className="flex-1 overflow-y-auto p-4">
            <AnimatePresence mode="wait">
              { page === 'dashboard' && (
                <motion.section key="dash" initial={{opacity:0, y:6}} animate={{opacity:1,y:0}} exit={{opacity:0,y:6}} transition={{duration:0.18}}>
                  <Dashboard selectedDate={selectedDate} setPage={setPage} tasksByDate={tasksByDate} toggleDone={toggleDone} completion={(totalCount? Math.round((doneCount/totalCount)*100):0)} />
                </motion.section>
              )}

              { page === 'tasks' && (
                <motion.section key="tasks" initial={{opacity:0, y:6}} animate={{opacity:1,y:0}} exit={{opacity:0,y:6}} transition={{duration:0.18}}>
                  <Tasks
                    viewMonth={viewMonth}
                    setViewMonth={setViewMonth}
                    selectedDate={selectedDate}
                    setSelectedDate={setSelectedDate}
                    tasksByDate={tasksByDate}
                    ensureTasksForMonth={ensureTasksForMonth}
                    toggleDone={toggleDone}
                    signTask={signTask}
                    updateTaskMeta={updateTaskMeta}
                    weeklyTemplate={weeklyTemplate}
                    addWeeklyTemplate={addWeeklyTemplate}
                    currentUser={currentUser}
                    profiles={profiles}
                  />
                </motion.section>
              )}

              { page === 'admin' && currentUser?.role === 'admin' && (
                <motion.section key="admin" initial={{opacity:0,y:6}} animate={{opacity:1,y:0}} exit={{opacity:0,y:6}} transition={{duration:0.18}}>
                  <AdminPanel users={users} addUser={addUser} profiles={profiles} addProfile={addProfile} weeklyTemplate={weeklyTemplate} addWeeklyTemplate={addWeeklyTemplate} />
                </motion.section>
              )}
            </AnimatePresence>
          </main>
        </div>
      </div>
    );
  }

  /* Small dashboard component */
  function Dashboard({ selectedDate, setPage }){
    // compute small stats
    const tasksToday = (load()?.tasksByDate?.[selectedDate] || []);
    const done = tasksToday.filter(t=>t.done).length;
    const total = tasksToday.length;
    const percent = total ? Math.round((done/total)*100) : 0;

    return (
      <div className="space-y-4">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="card p-4 flex-1">
            <div className="flex items-start justify-between">
              <div>
                <div className="text-sm text-gray-300">Heutiger Fortschritt</div>
                <div className="text-3xl font-bold text-green-300 mt-2">{percent}%</div>
                <div className="text-xs text-gray-400 mt-1">{total} Aufgabe(n) – {done} erledigt</div>
              </div>
              <div className="text-xs text-gray-400">Datum: <div className="font-medium text-white mt-1">{selectedDate}</div></div>
            </div>
            <div className="mt-4">
              <div className="w-full bg-black/20 rounded-full h-3">
                <div style={{width: `${percent}%`}} className="h-3 rounded-full bg-gradient-to-r from-green-500 to-green-400"></div>
              </div>
            </div>
          </div>

          <div className="card p-4 w-80">
            <div className="text-sm text-gray-300">Schnellaktionen</div>
            <div className="mt-3 flex flex-col gap-2">
              <button className="btn w-full" onClick={()=>setPage('tasks')}>Zu Aufgaben</button>
              <button className="small-btn w-full" onClick={()=>{
                const state = load();
                if(!state){ alert('Keine Daten zum exportieren.'); return; }
                const blob = new Blob([JSON.stringify(state, null, 2)], {type:'application/json'});
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a'); a.href=url; a.download='putz_export.json'; a.click(); URL.revokeObjectURL(url);
              }}>Backup herunterladen</button>
            </div>
          </div>
        </div>

        <div className="grid md:grid-cols-3 gap-4">
          <div className="card p-4">
            <div className="text-sm text-gray-300">Letzte Unterschriften</div>
            <RecentSignatures />
          </div>
          <div className="card p-4">
            <div className="text-sm text-gray-300">Offene Aufgaben</div>
            <OpenTasksList />
          </div>
          <div className="card p-4">
            <div className="text-sm text-gray-300">Infos</div>
            <div className="text-sm text-gray-400 mt-2">Diese App speichert Daten lokal im Browser (localStorage). Für Multi-User oder Server-Sync kann ich eine Backend-Variante erstellen.</div>
          </div>
        </div>
      </div>
    );
  }

  function RecentSignatures(){
    const state = load();
    const tasksByDate = state?.tasksByDate || {};
    const entries = [];
    Object.entries(tasksByDate).forEach(([date, arr])=>{
      arr.forEach(t=>{
        if(t.signed) entries.push({ date, title: t.title, signer: t.signer?.name || t.signer });
      });
    });
    entries.sort((a,b)=> (b.date.localeCompare(a.date)));
    return (
      <div className="mt-3 space-y-2 text-sm">
        {entries.slice(0,6).length === 0 && <div className="text-gray-400">Keine Unterschriften</div>}
        {entries.slice(0,6).map((e,i)=>(
          <div key={i} className="flex justify-between text-xs">
            <div>{e.title} <span className="text-gray-400">({e.signer})</span></div>
            <div className="text-gray-400">{e.date}</div>
          </div>
        ))}
      </div>
    );
  }

  function OpenTasksList(){
    const state = load();
    const tasksByDate = state?.tasksByDate || {};
    const open = [];
    Object.entries(tasksByDate).forEach(([date, arr])=>{
      arr.forEach(t=> { if(!t.done) open.push({date, title: t.title}); });
    });
    open.sort((a,b)=> a.date.localeCompare(b.date));
    return (
      <div className="mt-3 space-y-2 text-sm">
        {open.length === 0 && <div className="text-gray-400">Keine offenen Aufgaben</div>}
        {open.slice(0,6).map((o,i)=> <div key={i} className="flex justify-between"><div>{o.title}</div><div className="text-gray-400 text-xs">{o.date}</div></div>)}
      </div>
    );
  }

  /* Tasks page with calendar strip and task cards */
  function Tasks({ viewMonth, setViewMonth, selectedDate, setSelectedDate, tasksByDate, ensureTasksForMonth, toggleDone, signTask, updateTaskMeta, weeklyTemplate, addWeeklyTemplate, currentUser, profiles }){
    const days = monthDays(viewMonth.year, viewMonth.month);
    const tasks = tasksByDate[selectedDate] || [];

    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-semibold">Aufgaben</h2>
          <div className="flex items-center gap-2">
            <button className="small-btn" onClick={()=> setViewMonth(m=>({ year: m.month === 0 ? m.year - 1 : m.year, month: m.month === 0 ? 11 : m.month - 1 }))}>◀</button>
            <div className="text-sm text-gray-300">{new Date(viewMonth.year, viewMonth.month, 1).toLocaleString('de-DE', { month:'long', year:'numeric' })}</div>
            <button className="small-btn" onClick={()=> setViewMonth(m=>({ year: m.month === 11 ? m.year + 1 : m.year, month: m.month === 11 ? 0 : m.month + 1 }))}>▶</button>
            <button className="btn" onClick={()=> ensureTasksForMonth(viewMonth.year, viewMonth.month)}>Generiere Monat</button>
          </div>
        </div>

        <div className="overflow-x-auto py-2">
          <div className="flex gap-2">
            {days.map(d=>(
              <div key={d.iso} className={`min-w-[74px] p-2 rounded-lg ${selectedDate===d.iso? 'bg-gradient-to-br from-green-700/30 to-green-600/8 text-white' : 'bg-transparent text-gray-300' } cursor-pointer`} onClick={()=>setSelectedDate(d.iso)}>
                <div className="text-xs">{WEEKDAYS[d.weekday]}</div>
                <div className="text-lg font-semibold">{d.day}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-3">
          {tasks.length === 0 && <div className="text-gray-400">Keine Aufgaben an diesem Tag.</div>}
          {tasks.map(t=> <TaskCard key={t.id} dateISO={selectedDate} task={t} toggleDone={toggleDone} signTask={signTask} updateTaskMeta={updateTaskMeta} profiles={profiles} currentUser={currentUser} />)}
        </div>
      </div>
    );
  }

  function TaskCard({ dateISO, task, toggleDone, signTask, updateTaskMeta, profiles, currentUser }){
    const [openSign, setOpenSign] = useState(false);
    return (
      <div className="card p-3">
        <div className="flex justify-between items-start">
          <div>
            <div className="font-medium text-white">{task.title}</div>
            <div className="text-xs text-gray-400 mt-1">Erstellt: {task.createdFrom}</div>
            { (task.history||[]).length > 0 && <div className="text-xs text-amber-400 mt-1">Verschoben von: {(task.history||[]).map(h=>h.from).join(', ')}</div> }
          </div>
          <div className="flex flex-col items-end gap-2">
            <button className={`px-3 py-1 rounded ${task.done ? 'bg-green-600 text-black' : 'bg-gray-800 text-gray-200'}`} onClick={()=>toggleDone(dateISO, task.id)}>{task.done ? 'Erledigt' : 'Offen'}</button>
            <button className="small-btn" onClick={()=>setOpenSign(s=>!s)}>{task.signed ? 'Unterschrift' : 'Unterschreiben'}</button>
          </div>
        </div>

        <div className="mt-3">
          <ChecklistEditor dateISO={dateISO} task={task} updateTask={(m)=> updateTaskMeta(dateISO, task.id, m)} />
        </div>

        <div className="mt-3">
          <FryerAndTemps meta={task.meta||{}} onChange={(m)=> updateTaskMeta(dateISO, task.id, m)} />
        </div>

        { openSign && (
          <div className="mt-3 border-t border-gray-800 pt-3">
            <SignaturePanel profiles={profiles} onSign={(profile, dataUrl)=> { signTask(dateISO, task.id, profile, dataUrl); setOpenSign(false); }} />
            { task.signed && task.signatureDataUrl && <div className="mt-2"><img src={task.signatureDataUrl} alt="signature" className="w-36 border rounded-sm" /></div> }
          </div>
        )}

      </div>
    );
  }

  function ChecklistEditor({ dateISO, task, updateTask }){
    const [text, setText] = useState('');
    const state = load();
    function addItem(){
      if(!text.trim()) return;
      const s = state || {};
      s.tasksByDate = s.tasksByDate || {};
      s.tasksByDate[dateISO] = s.tasksByDate[dateISO] || [];
      const t = s.tasksByDate[dateISO].find(x=>x.id===task.id);
      if(!t) return;
      t.checklist = t.checklist || [];
      t.checklist.push({ id: uid('c'), text, checked:false });
      setText('');
      save(s);
      // reflect in UI by reloading - quick simple approach for single-file
      location.reload();
    }
    function toggle(id){
      const s = load();
      if(!s) return;
      const t = (s.tasksByDate?.[dateISO]||[]).find(x=>x.id===task.id);
      if(!t) return;
      t.checklist = t.checklist || [];
      const it = t.checklist.find(c=>c.id===id);
      if(it) it.checked = !it.checked;
      save(s);
      location.reload();
    }
    return (
      <div>
        <div className="text-sm font-medium">Checkliste</div>
        <div className="mt-2 space-y-1 text-sm">
          { (task.checklist || []).map(i=>(
            <label key={i.id} className="flex items-center gap-2">
              <input type="checkbox" checked={i.checked} onChange={()=>toggle(i.id)} />
              <span className={`${i.checked ? 'line-through text-gray-400' : ''}`}>{i.text}</span>
            </label>
          )) }
        </div>
        <div className="flex gap-2 mt-2">
          <input value={text} onChange={e=>setText(e.target.value)} placeholder="Neuen Punkt" className="flex-1 bg-transparent border border-gray-800 rounded px-2 py-1 text-sm" />
          <button className="btn" onClick={addItem}>Hinzufügen</button>
        </div>
      </div>
    );
  }

  /* Fryer and temperatures module */
  function FryerAndTemps({ meta, onChange }){
    const [fstatus, setFstatus] = useState(meta.fstatus||'');
    const [temp, setTemp] = useState(meta.temp||'');
    const [fat, setFat] = useState(meta.fat||'');
    const [cold, setCold] = useState(meta.coldroom||'');
    const [freez, setFreez] = useState(meta.freezer||'');

    useEffect(()=> onChange({ fstatus, temp, fat, coldroom: cold, freezer: freez }), [fstatus, temp, fat, cold, freez]);

    return (
      <div className="space-y-2 text-sm">
        <div className="font-medium">Fritteusen</div>
        <div className="flex gap-2 items-center">
          <label className="flex items-center gap-1"><input type="radio" name="fstat" checked={fstatus==='F'} onChange={()=>setFstatus('F')} /> F (filtern)</label>
          <label className="flex items-center gap-1"><input type="radio" name="fstat" checked={fstatus==='X'} onChange={()=>setFstatus('X')} /> X (muss neu)</label>
          <label className="flex items-center gap-1"><input type="radio" name="fstat" checked={fstatus==='S'} onChange={()=>setFstatus('S')} /> S (neues Öl)</label>
        </div>
        <div className="flex gap-2 items-center">
          <div className="text-xs text-gray-400">Temperatur (°C)</div>
          <input value={temp} onChange={e=>setTemp(e.target.value)} type="number" className="bg-transparent border border-gray-800 rounded px-2 py-1 w-28" />
          <div className="text-xs text-gray-400">Fettmesswert</div>
          <input value={fat} onChange={e=>setFat(e.target.value)} className="bg-transparent border border-gray-800 rounded px-2 py-1 w-28" />
        </div>

        <div className="mt-2 font-medium">Kühlraum / Truhe</div>
        <div className="flex gap-2 items-center">
          <input value={cold} onChange={e=>setCold(e.target.value)} placeholder="Kühlraum °C" type="number" className="bg-transparent border border-gray-800 rounded px-2 py-1 w-28" />
          <input value={freez} onChange={e=>setFreez(e.target.value)} placeholder="Truhe °C" type="number" className="bg-transparent border border-gray-800 rounded px-2 py-1 w-28" />
        </div>
      </div>
    );
  }

  /* Signature panel (small canvas) */
  function SignaturePanel({ profiles, onSign }){
    const canvasRef = useRef(null);
    const [drawing, setDrawing] = useState(false);
    const [profile, setProfile] = useState(profiles?.[0]?.id || (profiles?.[0]?.name || 'Anonym'));

    useEffect(()=>{
      const c = canvasRef.current;
      if(!c) return;
      const ctx = c.getContext('2d');
      ctx.lineWidth = 2.5;
      ctx.lineCap = 'round';
      ctx.strokeStyle = '#dbeafe';
    },[]);

    function ptr(e){
      const rect = canvasRef.current.getBoundingClientRect();
      if(e.touches && e.touches[0]) return { x: e.touches[0].clientX - rect.left, y: e.touches[0].clientY - rect.top };
      return { x: e.clientX - rect.left, y: e.clientY - rect.top };
    }
    function start(e){
      e.preventDefault();
      setDrawing(true);
      const p = ptr(e);
      const ctx = canvasRef.current.getContext('2d');
      ctx.beginPath(); ctx.moveTo(p.x, p.y);
    }
    function move(e){
      if(!drawing) return;
      const p = ptr(e);
      const ctx = canvasRef.current.getContext('2d');
      ctx.lineTo(p.x, p.y); ctx.stroke();
    }
    function end(){ setDrawing(false); }

    function clearCanvas(){
      const c = canvasRef.current; if(!c) return; const ctx = c.getContext('2d'); ctx.clearRect(0,0,c.width,c.height);
    }

    function submit(){
      const c = canvasRef.current; if(!c) return;
      const data = c.toDataURL('image/png');
      const profileObj = profiles.find(p=>p.id===profile) || { id: profile, name: profile };
      onSign(profileObj, data);
    }

    return (
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <select className="bg-transparent border border-gray-800 rounded px-2 py-1 text-sm" value={profile} onChange={e=>setProfile(e.target.value)}>
            {profiles.map(p=> <option key={p.id} value={p.id}>{p.name}</option>)}
          </select>
          <button className="small-btn" onClick={clearCanvas}>Löschen</button>
          <button className="btn" onClick={submit}>Unterschreiben</button>
        </div>
        <div className="mt-2">
          <canvas ref={canvasRef} width={420} height={120} onMouseDown={start} onMouseMove={move} onMouseUp={end} onMouseLeave={end}
            onTouchStart={start} onTouchMove={move} onTouchEnd={end} style={{width:'100%', maxWidth:420}} />
        </div>
      </div>
    );
  }

  /* Admin page */
  function AdminPanel({ users, addUser, profiles, addProfile, weeklyTemplate, addWeeklyTemplate }){
    const [name, setName] = useState('');
    const [weekday, setWeekday] = useState(1);
    const [title, setTitle] = useState('');

    return (
      <div className="space-y-4">
        <h2 className="text-2xl font-semibold">Admin</h2>

        <div className="card p-4">
          <div className="text-sm text-gray-300">Neuen Benutzer anlegen</div>
          <div className="flex gap-2 mt-3">
            <input value={name} onChange={e=>setName(e.target.value)} placeholder="Name" className="bg-transparent border border-gray-800 rounded px-2 py-1 flex-1" />
            <button className="btn" onClick={()=>{ if(!name) return alert('Name eingeben'); addUser(name); setName(''); }}>Hinzufügen</button>
          </div>
          <div className="mt-3 text-sm text-gray-400">
            Bestehende Benutzer:
            <ul className="list-disc ml-5 mt-2">
              {users.map(u=> <li key={u.id}>{u.name} ({u.role})</li>)}
            </ul>
          </div>
        </div>

        <div className="card p-4">
          <div className="text-sm text-gray-300">Wöchentliche Vorlage</div>
          <div className="flex gap-2 mt-3 items-center">
            <select value={weekday} onChange={e=>setWeekday(Number(e.target.value))} className="bg-transparent border border-gray-800 rounded px-2 py-1">
              {WEEKDAYS.map((w,i)=> <option key={i} value={i}>{w}</option>)}
            </select>
            <input value={title} onChange={e=>setTitle(e.target.value)} placeholder="Aufgabe" className="bg-transparent border border-gray-800 rounded px-2 py-1 flex-1" />
            <button className="btn" onClick={()=>{ if(!title) return alert('Titel eingeben'); addWeeklyTemplate(weekday, title); setTitle(''); }}>Vorlage</button>
          </div>
          <div className="mt-3 text-sm text-gray-400">
            Aktuelle Vorlagen:
            <div className="mt-2">
              { Object.entries(weeklyTemplate).map(([wd, arr]) => <div key={wd}><strong>{WEEKDAYS[wd]}:</strong> {arr.map(x=>x.title).join(', ') || '—'}</div>) }
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Render app
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<App />);
  </script>
</body>
</html>
